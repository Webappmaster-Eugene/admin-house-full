generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/common/generated/zod"
  createInputTypes = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RegisterWithRoleKey {
  uuid String @id @default(uuid()) @db.Uuid
  key  String @unique

  @@map("register_with_role_key")
}

model AppSettings {
  uuid        String                 @id @default(uuid()) @db.Uuid
  name        String
  description String
  comment     String
  status      EStatusApp
  language    ELanguagesTypeVariants
  currency    ECurrencyTypeVariants

  @@map("app_settings")
}

enum EStatusApp {
  UP
  DOWN
}

enum ELanguagesTypeVariants {
  RUSSIAN
  ENGLISH
}

enum ECurrencyTypeVariants {
  RUB
  USD
  EUR
  BYR
}

model User {
  uuid                         String            @id @default(uuid()) @db.Uuid
  firstName                    String            @map("first_name")
  secondName                   String?           @map("second_name")
  avatar                       String?
  phone                        String?
  email                        String            @unique
  password                     String
  address                      String?
  info                         String?
  documents                    String?
  customerOfProjects           Project[]         @relation("project_customer")
  responsibleManagerOfProjects Project[]         @relation("project_responsible_manager")
  createdFieldsOfMaterials     FieldOfMaterial[]
  changedPrices                PriceChanging[]
  roleUuid                     String            @map("role_uuid") @db.Uuid
  role                         Role              @relation(fields: [roleUuid], references: [uuid], onDelete: Restrict, onUpdate: Cascade)
  creatorOfWorkspaceUuid       String?           @map("creator_of_workspace_uuid") @db.Uuid
  creatorOfWorkspace           Workspace?        @relation("creator_of_workspace")
  handbookManagerUuid          String?           @map("handbook_manager_uuid") @db.Uuid
  handbookManager              Handbook?
  memberOfWorkspaceUuid        String?           @map("member_of_workspace_uuid") @db.Uuid
  memberOfWorkspace            Workspace?        @relation("workspace_members", fields: [memberOfWorkspaceUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  memberOfOrganizationUuid     String?           @map("member_of_organization_uuid") @db.Uuid
  memberOfOrganization         Organization?     @relation("organization_members", fields: [memberOfOrganizationUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  memberOfProjectUuid          String?           @map("member_of_project_uuid") @db.Uuid
  memberOfProject              Project?          @relation("project_members", fields: [memberOfProjectUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  leaderOfOrganizations        Organization[]
  createdAt                    DateTime          @default(now()) @map("created_at")
  updatedAt                    DateTime          @updatedAt @map("updated_at")
  S                            S[]

  @@map("user")
}

model Role {
  uuid        String            @id @default(uuid()) @db.Uuid
  idRole      Int?              @unique @default(autoincrement()) @map("id_role")
  name        EUserTypeVariants @unique
  description String?
  users       User[]
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  @@map("role")
}

enum EUserTypeVariants {
  ADMIN
  MANAGER
  WORKER
  CUSTOMER
}

model Workspace {
  uuid                    String         @id @default(uuid()) @db.Uuid
  name                    String
  description             String?
  workspaceCreatorUuid    String         @unique @map("workspace_creator_uuid") @db.Uuid
  workspaceCreator        User?          @relation("creator_of_workspace", fields: [workspaceCreatorUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  workspaceMembers        User[]         @relation("workspace_members")
  organizations           Organization[]
  handbookOfWorkspaceUuid String?        @unique @map("handbook_of_workspace_uuid") @db.Uuid
  handbookOfWorkspace     Handbook?
  createdAt               DateTime       @default(now()) @map("created_at")
  updatedAt               DateTime       @updatedAt @map("updated_at")

  @@map("workspace")
}

model Organization {
  uuid                   String    @id @default(uuid()) @db.Uuid
  name                   String
  description            String?
  workspaceUuid          String    @map("workspace_uuid") @db.Uuid
  workspace              Workspace @relation(fields: [workspaceUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  organizationLeaderUuid String    @map("organization_leader_uuid") @db.Uuid
  organizationLeader     User      @relation(fields: [organizationLeaderUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  organizationMembers    User[]    @relation("organization_members")
  projects               Project[]
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  @@map("organization")
}

model Project {
  uuid                   String       @id @default(uuid()) @db.Uuid
  name                   String
  description            String?
  organizationUuid       String       @map("organization_uuid") @db.Uuid
  organization           Organization @relation(fields: [organizationUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  customerMail           String       @map("customer_email")
  customerUuid           String       @map("customer_uuid") @db.Uuid
  customer               User         @relation("project_customer", fields: [customerUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  responsibleManagerUuid String       @map("responsible_manager_uuid") @db.Uuid
  responsibleManager     User         @relation("project_responsible_manager", fields: [responsibleManagerUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  projectMembers         User[]       @relation("project_members")
  createdAt              DateTime     @default(now()) @map("created_at")
  updatedAt              DateTime     @updatedAt @map("updated_at")

  @@map("project")
}

model Handbook {
  uuid                         String                              @id @default(uuid()) @db.Uuid
  name                         String
  description                  String?
  canCustomerView              Boolean?                            @default(false) @map("can_customer_view")
  workspaceUuid                String?                             @unique @map("workspace_uuid") @db.Uuid
  workspace                    Workspace?                          @relation(fields: [workspaceUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  responsibleManagerUuid       String                              @unique @map("responsible_manager_uuid") @db.Uuid
  responsibleManager           User?                               @relation(fields: [responsibleManagerUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  materials                    Material[]
  fieldTypes                   FieldType[]
  createdAt                    DateTime                            @default(now()) @map("created_at")
  updatedAt                    DateTime                            @updatedAt @map("updated_at")
  fieldUnitMeasurements        FieldUnitMeasurement[]
  fieldVariantsForSelectorType FieldVariantsForSelectorFieldType[]

  @@map("handbook")
}

model FieldType {
  uuid                               String                              @id @default(uuid()) @db.Uuid
  name                               String
  description                        String
  jsType                             EFieldTypeVariants                  @map("js_type")
  handbookUuid                       String                              @map("handbook_uuid") @db.Uuid
  handbook                           Handbook                            @relation(fields: [handbookUuid], references: [uuid], onDelete: Restrict, onUpdate: Cascade)
  fieldOfMaterials                   FieldOfMaterial[]
  fieldVariantsForSelectorFieldTypes FieldVariantsForSelectorFieldType[]
  createdAt                          DateTime                            @default(now()) @map("created_at")
  updatedAt                          DateTime                            @updatedAt @map("updated_at")

  @@map("field_type")
}

model FieldVariantsForSelectorFieldType {
  uuid          String    @id @default(uuid()) @db.Uuid
  name          String
  description   String
  fieldTypeUuid String    @map("field_type_uuid") @db.Uuid
  fieldType     FieldType @relation(fields: [fieldTypeUuid], references: [uuid], onDelete: Restrict, onUpdate: Cascade)
  handbookUuid  String    @db.Uuid
  handbook      Handbook  @relation(fields: [handbookUuid], references: [uuid])
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("field_variants_for_selector_field_type")
}

enum EFieldTypeVariants {
  number
  string
  array
}

model FieldUnitMeasurement {
  uuid             String            @id @default(uuid()) @db.Uuid
  name             String
  comment          String?
  fieldOfMaterials FieldOfMaterial[]
  handbookUuid     String            @map("handbook_uuid") @db.Uuid
  handbook         Handbook          @relation(fields: [handbookUuid], references: [uuid], onDelete: Restrict, onUpdate: Cascade)
  materials        Material[]
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  @@map("field_unit_measurement")
}

model GlobalCategoryMaterial {
  uuid              String                  @id @default(uuid()) @db.Uuid
  name              EGlobalCategoryVariants @unique
  nameRu            String                  @map("name_ru")
  comment           String?
  color             String?
  categoryMaterials CategoryMaterial[]
  createdAt         DateTime                @default(now()) @map("created_at")
  updatedAt         DateTime                @updatedAt @map("updated_at")

  @@map("global_category")
}

enum EGlobalCategoryVariants {
  PEOPLE
  MATERIALS
  OVERHEAD
  MECHANISMS
}

model CategoryMaterial {
  uuid                       String                 @id @default(uuid()) @db.Uuid
  name                       String
  comment                    String?
  templateName               String?                @map("template_name")
  globalCategoryMaterialUuid String                 @map("global_category_uuid") @db.Uuid
  globalCategoryMaterial     GlobalCategoryMaterial @relation(fields: [globalCategoryMaterialUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  fieldOfMaterials           FieldOfMaterial[]
  materials                  Material[]
  createdAt                  DateTime               @default(now()) @map("created_at")
  updatedAt                  DateTime               @updatedAt @map("updated_at")

  @@map("category_material")
}

model ResponsiblePartnerProducer {
  uuid      String     @id @default(uuid()) @db.Uuid
  name      String
  comment   String?
  info      String?
  email     String?
  phone     String?
  materials Material[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("responsible_partner_producer")
}

model FieldOfMaterial {
  uuid                  String               @id @default(uuid()) @db.Uuid
  name                  String
  comment               String?
  isRequired            Boolean?             @default(true) @map("is_required")
  defaultValue          String?              @map("default_value")
  categoryUuid          String               @map("category_uuid") @db.Uuid
  category              CategoryMaterial     @relation(fields: [categoryUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  createdByUuid         String               @map("created_by_uuid") @db.Uuid
  createdBy             User                 @relation(fields: [createdByUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  unitOfMeasurementUuid String               @map("unit_of_measurement_uuid") @db.Uuid
  unitOfMeasurement     FieldUnitMeasurement @relation(fields: [unitOfMeasurementUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  fieldType             FieldType            @relation(fields: [fieldTypeUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  fieldTypeUuid         String               @map("field_type_uuid") @db.Uuid
  createdAt             DateTime             @default(now()) @map("created_at")
  updatedAt             DateTime             @updatedAt @map("updated_at")

  @@map("field_of_category")
}

model Material {
  uuid                   String                     @id @default(uuid()) @db.Uuid
  name                   String
  comment                String?
  namePublic             Boolean?                   @default(true) @map("name_public")
  handbookUuid           String                     @map("handbook_uuid") @db.Uuid
  handbook               Handbook                   @relation(fields: [handbookUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  price                  Float
  unitMeasurementUuid    String                     @map("unit_measurement_uuid") @db.Uuid
  unitMeasurement        FieldUnitMeasurement       @relation(fields: [unitMeasurementUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  categoryUuid           String                     @map("category_uuid") @db.Uuid
  category               CategoryMaterial           @relation(fields: [categoryUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  responsiblePartnerUuid String                     @map("responsible_partner_uuid") @db.Uuid
  responsiblePartner     ResponsiblePartnerProducer @relation(fields: [responsiblePartnerUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  priceChanges           PriceChanging[]
  createdAt              DateTime                   @default(now()) @map("created_at")
  updatedAt              DateTime                   @updatedAt @map("updated_at")
  S                      S[]

  @@map("material")
}

model PriceChanging {
  uuid          String   @id @default(uuid()) @db.Uuid
  newPrice      Float    @map("new_price")
  comment       String?
  materialUuid  String   @map("material_uuid") @db.Uuid
  material      Material @relation(fields: [materialUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  changedByUuid String   @map("changed_by_uuid") @db.Uuid
  changedBy     User     @relation(fields: [changedByUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("price_changing")
}

model StatusResource {
  uuid      String   @id @default(uuid()) @db.Uuid
  name      String
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("status_resource")
}
