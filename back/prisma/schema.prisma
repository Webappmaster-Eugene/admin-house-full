generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/generated/zod"
  createInputTypes = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid                      String            @id @default(uuid()) @db.Uuid
  firstName                 String            @map("first_name")
  secondName                String?           @map("second_name")
  phone                     String?
  email                     String            @unique
  password                  String
  address                   String?
  info                      String?
  documents                 String?
  projectCustomer           Project[]         @relation("project_customer")
  projectResponsibleManager Project[]         @relation("project_responsible_manager")
  createdFieldsOfCategory   FieldOfCategory[]
  changedPrices             PriceChanging[]
  roleUuid                  String            @map("role_uuid") @db.Uuid
  role                      Role              @relation(fields: [roleUuid], references: [uuid], onDelete: Restrict, onUpdate: Cascade)
  creatorOfWorkspaceUuid    String?           @map("creator_of_workspace_uuid") @db.Uuid
  creatorOfWorkspace        Workspace?        @relation("creator_of_workspace")
  memberOfWorkspaceUuid     String?           @map("member_of_workspace_uuid") @db.Uuid
  memberOfWorkspace         Workspace?        @relation("workspace_members", fields: [memberOfWorkspaceUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  memberOfOrganizationUuid  String?           @map("member_of_organization_uuid") @db.Uuid
  memberOfOrganization      Organization?     @relation("organization_members", fields: [memberOfOrganizationUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  leaderOfOrganization      Organization?
  createdAt                 DateTime          @default(now()) @map("created_at")
  updatedAt                 DateTime          @updatedAt @map("updated_at")
}

model Role {
  uuid        String            @id @default(uuid()) @db.Uuid
  idRole      Int?              @unique @default(autoincrement()) @map("id_role")
  name        EUserTypeVariants @unique
  description String?
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  users       User[]
}

enum EUserTypeVariants {
  ADMIN
  MANAGER
  WORKER
  CUSTOMER
}

model Workspace {
  uuid                    String         @id @default(uuid()) @db.Uuid
  name                    String
  description             String?
  workspaceCreatorUuid    String         @unique @map("workspace_creator_uuid") @db.Uuid
  workspaceCreator        User?          @relation("creator_of_workspace", fields: [workspaceCreatorUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  workspaceMembers        User[]         @relation("workspace_members")
  organizations           Organization[]
  handbookOfWorkspaceUuid String?        @unique @map("handbook_of_workspace_uuid") @db.Uuid
  handbookOfWorkspace     Handbook?
  createdAt               DateTime       @default(now()) @map("created_at")
  updatedAt               DateTime       @updatedAt @map("updated_at")
}

model Organization {
  uuid                   String    @id @default(uuid()) @db.Uuid
  name                   String
  description            String?
  workspaceUuid          String    @map("workspace_uuid") @db.Uuid
  workspace              Workspace @relation(fields: [workspaceUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  organizationLeaderUuid String    @unique @map("organization_leader_uuid") @db.Uuid
  organizationLeader     User      @relation(fields: [organizationLeaderUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  organizationMembers    User[]    @relation("organization_members")
  projects               Project[]
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
}

model Project {
  uuid                   String       @id @default(uuid()) @db.Uuid
  name                   String
  description            String?
  organizationUuid       String       @map("organization_uuid") @db.Uuid
  organization           Organization @relation(fields: [organizationUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  customerUuid           String       @map("customer_uuid") @db.Uuid
  customer               User         @relation("project_customer", fields: [customerUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  responsibleManagerUuid String       @map("responsible_manager_uuid") @db.Uuid
  responsibleManager     User         @relation("project_responsible_manager", fields: [responsibleManagerUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  createdAt              DateTime     @default(now()) @map("created_at")
  updatedAt              DateTime     @updatedAt @map("updated_at")
}

model Handbook {
  uuid                  String     @id @default(uuid()) @db.Uuid
  name                  String
  description           String?
  canCustomerView       Boolean?   @default(false) @map("can_customer_view")
  workspaceHandbookUuid String?    @unique @map("workspace_handbook_uuid") @db.Uuid
  workspaceHandbook     Workspace? @relation(fields: [workspaceHandbookUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  material              Material[]
  createdAt             DateTime   @default(now()) @map("created_at")
  updatedAt             DateTime   @updatedAt @map("updated_at")
}

model FieldType {
  uuid            String             @id @default(uuid()) @db.Uuid
  name            String
  description     String
  jsType          EFieldTypeVariants @map("js_type")
  fieldOfCategory FieldOfCategory[]
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
}

enum EFieldTypeVariants {
  number
  string
  array
}

model FieldUnitMeasurement {
  uuid            String            @id @default(uuid()) @db.Uuid
  name            String
  comment         String?
  fieldOfCategory FieldOfCategory[]
  material        Material[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
}

model GlobalCategory {
  uuid             String             @id @default(uuid()) @db.Uuid
  name             String
  comment          String?
  color            String?
  categoryMaterial CategoryMaterial[]
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
}

model CategoryMaterial {
  uuid               String            @id @default(uuid()) @db.Uuid
  name               String
  comment            String?
  templateName       String?           @map("template_name")
  globalCategoryUuid String            @map("global_category_uuid") @db.Uuid
  globalCategory     GlobalCategory    @relation(fields: [globalCategoryUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  fieldOfCategory    FieldOfCategory[]
  material           Material[]
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
}

model ResponsiblePartnerProducer {
  uuid      String     @id @default(uuid()) @db.Uuid
  name      String
  comment   String?
  info      String?
  email     String?
  phone     String?
  material  Material[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
}

model FieldOfCategory {
  uuid                  String               @id @default(uuid()) @db.Uuid
  name                  String
  comment               String?
  isRequired            Boolean?             @default(true) @map("is_required")
  defaultValue          String?              @map("default_value")
  categoryUuid          String               @map("category_uuid") @db.Uuid
  category              CategoryMaterial     @relation(fields: [categoryUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  createdByUuid         String               @map("created_by_uuid") @db.Uuid
  createdBy             User                 @relation(fields: [createdByUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  unitOfMeasurementUuid String               @map("unit_of_measurement_uuid") @db.Uuid
  unitOfMeasurement     FieldUnitMeasurement @relation(fields: [unitOfMeasurementUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  fieldType             FieldType            @relation(fields: [fieldTypeUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  fieldTypeUuid         String               @map("field_type_uuid") @db.Uuid
  createdAt             DateTime             @default(now()) @map("created_at")
  updatedAt             DateTime             @updatedAt @map("updated_at")
}

model Material {
  uuid                   String                     @id @default(uuid()) @db.Uuid
  name                   String
  comment                String?
  namePublic             Boolean?                   @default(true) @map("name_public")
  handbookUuid           String                     @map("handbook_uuid") @db.Uuid
  handbook               Handbook                   @relation(fields: [handbookUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  price                  Float
  unitMeasurementUuid    String                     @map("unit_measurement_uuid") @db.Uuid
  unitMeasurement        FieldUnitMeasurement       @relation(fields: [unitMeasurementUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  categoryUuid           String                     @map("category_uuid") @db.Uuid
  category               CategoryMaterial           @relation(fields: [categoryUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  responsiblePartnerUuid String                     @map("responsible_partner_uuid") @db.Uuid
  responsiblePartner     ResponsiblePartnerProducer @relation(fields: [responsiblePartnerUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  priceChanges           PriceChanging[]
  createdAt              DateTime                   @default(now()) @map("created_at")
  updatedAt              DateTime                   @updatedAt @map("updated_at")
}

model PriceChanging {
  uuid          String   @id @default(uuid()) @db.Uuid
  newPrice      Float    @map("new_price")
  comment       String?
  materialUuid  String   @map("material_uuid") @db.Uuid
  material      Material @relation(fields: [materialUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  changedByUuid String   @map("changed_by_uuid") @db.Uuid
  changedBy     User     @relation(fields: [changedByUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
}
